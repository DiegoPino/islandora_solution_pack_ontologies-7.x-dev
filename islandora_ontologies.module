<?php

/**
 * @file
 * Ontology Solution Pack, Based on Islandora_relationship_editor 
 */
/** 
 * Implements hook_menu().
 */
function islandora_ontologies_menu() {

   $items['islandora/object/%islandora_object/parsedontology'] = array(
       'weight' => 4,
       'title' => t('Ontology Association'),
	   'description' => t('Manage Ontology association to Content Models'),
	   'file' => 'includes/manage_ontologies.inc',
	   'page callback' => 'drupal_get_form',
       'page arguments' => array('islandora_ontologies_parsed_vocabulary_view_form',2),
       'type' => MENU_LOCAL_TASK,
       'access callback' => 'islandora_ontologies_access',
       'access arguments' => array(2),
     );
     $items['islandora/object/%islandora_object/manage/object/editontology'] = array(
      'title' => 'Update Ontology Stream',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_ontologies_update_ontology', 2),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'includes/owl_upload.form.inc',
      'access callback' => 'islandora_ontologies_update_ontologystream_access',
      'access arguments' => array(2),
    );
    
	
	$items['islandora/object/%islandora_object/manage/relationships'] = array(
      'title' => t('Manage Relationships'),
	  'description' => t('Manage how this object relates to other objects based on Ontologies'),
      'file' => 'includes/manage_ontologies.inc',
	  'page callback' => 'islandora_ontologies_manage_relations',
      'page arguments' => array(2),
	  'access callback' => 'islandora_ontologies_relate_access',
      'access arguments' => array(2),
	  'type' => MENU_LOCAL_TASK,
	   'weight' => -5,
    );
  
  $items['islandora/object/%islandora_object/manage/object/relationships/add'] = array(
    'title' => t('Add relationships'),
    'description' => t('Add a new related object'),
    'file' => 'includes/add_relation.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_ontologies_add_relationships_form', 2),
    'access callback' => 'islandora_ontologies_relate_access_mod',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['islandora/object/%islandora_object/manage/relationships/delete/%/%/%'] = array(
    'title' => t('Delete relationship'),
    'description' => t('Delete a relationship'),
    'file' => 'includes/del_relation.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_ontologies_delete_relationships', 2, 6, 7, 8),
    'access callback' => 'islandora_ontologies_relate_access_mod',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['islandora/relationships/autocomplete/target/%/%'] = array(
    'page callback' => 'islandora_ontologies_object_autocomplete',
    'page arguments' => array(4,5),
    'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['islandora/relationships/autocomplete/cmodel/'] = array(
    'page callback' => 'islandora_content_model_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  
  
  return $items;
}
function islandora_ontologies_access($islandora_object) {
  if (!isset($islandora_object)) {
    return FALSE;
  }
  $models = $islandora_object->models;
  if (array_intersect(array('ontologies:ontologyCModel'), $models)) {
    return islandora_object_access(ISLANDORA_MANAGE_PROPERTIES, $islandora_object);
  }
  return FALSE;
}
function islandora_ontologies_relate_access($islandora_object) {
  if (!isset($islandora_object)) {
    return FALSE;
  }
  
  $models = $islandora_object->models;
  if (!array_intersect(array('islandora:collectionCModel'), $models)) {
    return islandora_object_access(ISLANDORA_MANAGE_PROPERTIES, $islandora_object);
  }
  return FALSE;
}

function islandora_ontologies_relate_access_mod($islandora_object_pid) {
  if (!isset($islandora_object_pid)) {
    return FALSE;
  }
try {
	$islandora_object=islandora_object_load($islandora_object_pid);
}
catch (Exception $e) 
{
	return FALSE;
}
if ($islandora_object)
	{
  $models = $islandora_object->models;
  if (!array_intersect(array('islandora:collectionCModel'), $models)) {
    return islandora_object_access(ISLANDORA_MANAGE_PROPERTIES, $islandora_object);
  }
}
  return FALSE;
}

function islandora_ontologies_update_ontologystream_access($islandora_object) {
    if (!isset($islandora_object)) {
      return FALSE;
    }
    $models = $islandora_object->models;
    if (array_intersect(array('ontologies:ontologyCModel'), $models)) {
      return islandora_object_access(ISLANDORA_MANAGE_PROPERTIES, $islandora_object);
    }
    return FALSE;
}
/**
 * This is the callback function defined in the menu array of this module.
 *
 * This function will be called if our islandora_red_biodiversidad_access() check returns true
 * we call another theme function here which also invokes the desired preprocessor
 *
 * @param IslandoraObject $islandora_object
 *   an islandora object
 *
 * @return string
 *   the rendered output
 */
function islandora_ontologies_parsed_vocabulary_view($islandora_object) {
  $output = theme('islandora_ontologies_parsed',
    array('islandora_object' => $islandora_object));
  return $output;
}

/** 
 * Implements hook_theme().
 */
function islandora_ontologies_theme() {
  return array(
    'islandora_ontologies_table' => array(
      'variables' => array('relationships' => NULL),
      'template' => 'relationship-editor-table',
      'path' => drupal_get_path('module', 'islandora_ontologies') . '/theme',
    ),
    'islandora_ontologies_block' => array(
    'variables' => array('islandora_object' => NULL),
	'template' => 'theme/related-objects-block',
      	'file' => 'theme/related-objects-block.theme.inc',
    ),
    'islandora_ontologies_parsed' => array(
        'variables' => array('islandora_object' => NULL),
	    'template' => 'theme/parsed-ontology',
      	'file' => 'theme/theme.inc',
    ),
    'islandora_ontologies_ontology_management_table' => array(
      'file' => 'theme/theme.inc',
      'render element' => 'table',
    ),

  );
}
/**
 * Implements hook_islandora_required_objects().
 */
function islandora_ontologies_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_ontologies');
  module_load_include('inc', 'islandora_ontologies', 'includes/utilities');
  
  // ontologies Content Model , we will use this as additional content model for every other model in this module
  $ontologies_content_model = $connection->repository->constructObject('ontologies:ontologyCModel');
  $ontologies_content_model->owner = 'fedoraAdmin';
  $ontologies_content_model->label = 'Ontologies Content Model';
  $ontologies_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  islandora_ontologies_ingest__ontologies_ds_composite_datastream($ontologies_content_model);
  
  // ontologies Collection.
  $ontologies_collection = $connection->repository->constructObject('ontologies:ontologies_collection');
  $ontologies_collection->owner = 'fedoraAdmin';
  $ontologies_collection->label = 'Ontologies Collection';
  $ontologies_collection->models = 'islandora:collectionCModel';
  $ontologies_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream.
  $datastream = $ontologies_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_ontologies_collection_policy.xml", FALSE);
  $ontologies_collection->ingestDatastream($datastream);
  // TN Datastream.
  $datastream = $ontologies_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $ontologies_collection->ingestDatastream($datastream);
  return array(
    'islandora_ontologies' => array(
      'title' => 'Islandora Ontologies',
      'objects' => array(
		$ontologies_content_model,
        $ontologies_collection,
      ),
    ),
  );
}
function islandora_ontologies_xml_form_builder_get_transforms() {
  $module_path = drupal_get_path('module', 'islandora_ontologies');
  return array(
    'dc_no_transform.xsl' => "$module_path/xsl/dc_no_transform.xsl",
);
}
/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_ontologies_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_ontologies');
  return array(
    'Ontology Dublin Core Description Form' => array(
      'form_file' => "$module_path/xml/dc_ontologies_form.xml",
    ),
  );
}


function islandora_ontologies_islandora_content_model_forms_form_associations() {
  return array(
    'islandora_ontologies_dc' => array(
      'content_model' => 'ontologies:ontologyCModel',
      'form_name' => 'Ontology Dublin Core Description Form',
      'dsid' => 'DC',
      'title_field' => array('dc-title'),
      'transform' =>  'dc_no_transform.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_edit_datastream_registry()
 * We added a edit link to ONTOLOGY Datastream, so we can update our ontology
*/

function islandora_ontologies_islandora_edit_datastream_registry(AbstractObject $object, AbstractDatastream $datastream)
{
    if (($datastream->id)=='ONTOLOGY')
	{
	return array(
      array(
        'Name' => t('Ontology Upload Form'),
        'url' => "islandora/object/{$object->id}/manage/object/editontology",
        'weight' => 5,
      ),
    );
	}
}


/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 * On Ingestion we wanÂ´t to parse our ontology datastream and verify if there is a owl:class -> existing CMODEL in our repository
 * for each matching owl:class we could add a hasLocalOntology:objectid to the corresponding CMODEL
 *
 *
 */
function islandora_ontologies_ontologies_ontologyCModel_islandora_object_ingested(AbstractObject $fedora_object) {
 module_load_include('inc', 'islandora_ontologies', 'includes/utilities');
 islandora_ontologies_mapowlclasses_to_cmodels($fedora_object);
}


function islandora_ontologies_islandora_object_purged($pid) {

  module_load_include('inc', 'islandora_ontologies', 'includes/batch');
  batch_set(islandora_ontologies_removeto_relations_batch($pid));
}

function islandora_ontologies_object_autocomplete($cmodel,$x2) {
 
    
  //We will also have to check if the URL is external, because of Solr Cloud
 
  

	$json=array();
    if (isset($_GET['q'])) {
      $stub = end(explode('/', $_GET['q']));
      $stub = islandora_solr_lesser_escape($stub);
      $qualifier = 'dc.title' . ':' . $stub . '*';
	  $qualifier .= " OR ".'fgs_label_mt' . ':' . $stub . '*';
	  $qualifier .= " OR ".'dc.identifier' . ':' . $stub . '*';
    }
    $params = array(
      'fl' => array('fgs_label_mt', 'PID', 'PID_fullurl'),
    );
    $query = "($qualifier) AND " . 'RELS_EXT_hasModel_uri_mt:"' . $cmodel . '"';
    $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
    $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
    $solr->setCreateDocuments(FALSE);
    try {
      $results = $solr->search($query, 0, 1000, $params);
      $json = json_decode($results->getRawResponse(), TRUE);
    }
    catch (Exception $e) {
      watchdog_exception('Islandora Ontologies', $e, 'Got an exception while searching objects in autocomplete for callback.', array(), WATCHDOG_ERROR);
    }
    $list = array();
    foreach ($json['response']['docs'] as $choice) {
     
      if (isset($choice['fgs_label_mt'])) {
        $list[$choice['PID']] = $choice['fgs_label_mt'][0];
      }
    }
    //$list[$cmodel]=$cmodel;
	//$list[$x2]=$x2;
    drupal_json_output($list);
  }
  



/** 
 *  Implements hook_islandora_CMODEL_ingest_steps().
 *
 * @param array $form_state
 * 
 */


function islandora_ontologies_ontologies_ontologyCmodel_islandora_ingest_steps(array $form_state) {
  return array(
    'islandora_ontologies_owl_upload_form' => array(
      'weight' => 5,
      'type' => 'form',
      'form_id' => 'islandora_ontologies_owl_upload_form',
      'module' => 'islandora_ontologies',
      'file' => 'includes/owl_upload.form.inc',
    ),
  );
}

 /**
 * Implements VLOT javascript libraries
 * This Libraries allow a visual representation of related objects using arbor.js and our own implementation
 */
function  islandora_ontologies_library() {
		  $path=drupal_get_path('module', 'islandora_ontologies');
		  
			  $libraries['islandora_ontologies_vlot'] = array(
			  		    'title' => 'islandora ontologies vlot',
			  		    'version' => 3.11, //Matched vis version March 2015
					      'css' => array(
					     
                  "$path/css/islandora_ontologies_vlot.css" => array(
					        'type' => 'file',
					        'media' => 'screen',
					      ),
					      "$path/js/vis/dist/vis.min.css" => array(
					        'type' => 'file',
					        'media' => 'screen',
					      ),
          ),
        
			  		    'js' => array(
			  		      array(
			  		        'type' => 'file',
			  		         'data' => "$path/js/vis/dist/vis.min.js",
			  		         'group' => JS_LIBRARY,
			  		         'preprocess' => FALSE,
			  		         'weight' => 2,
			  		      ),
			  		      array(
			  		        'type' => 'file',
			  		        'data' => "$path/js/vlot_vis.js",
			  		        'group' => JS_LIBRARY,
			  		        'preprocess' => FALSE,
			  		        'weight' => 3,
			  		      ),
			  		    ), 
			  		  ); 
      			  $libraries['islandora_ontologies_manage_vlot'] = array(
      			  		    'title' => 'islandora ontologies manage vlot',
      			  		    'version' => 3.11,
      					      'css' => array(
					     
                        "$path/css/islandora_ontologies_vlot.css" => array(
      					        'type' => 'file',
      					        'media' => 'screen',
      					      ),
      					      "$path/js/vis/dist/vis.min.css" => array(
      					        'type' => 'file',
      					        'media' => 'screen',
      					      ),
                ),
        
      			  		    'js' => array(
      			  		      array(
      			  		        'type' => 'file',
      			  		         'data' => "$path/js/vis/dist/vis.min.js",
      			  		         'group' => JS_LIBRARY,
      			  		         'preprocess' => FALSE,
      			  		         'weight' => 2,
      			  		      ),
      			  		      array(
      			  		        'type' => 'file',
      			  		        'data' => "$path/js/vlot_manage.js",
      			  		        'group' => JS_LIBRARY,
      			  		        'preprocess' => FALSE,
      			  		        'weight' => 3,
      			  		      ),
      			  		    ), 
      			  		  ); 
			  
			  
			  
	  return $libraries;
		}
/* Implements hook_islandora_ontologies_vlot_info
 * @return array
 *   Associative array containing a set of Colors,CMODEL to human mapping and other attributes for the canvas renderer of vlot
 */

function islandora_ontologies_islandora_ontologies_vlot_info() {
		  return array('basestyle'=>array(
		        'default' => array(
		         'cmodel_label' => 'object',
		         'color' => 'blue',//or #454545 or rgb(10,10,10)
		     	),
			)
		  );
		}


/**
 * Get all available Vlot style definitions.
 *
 * @string ($graphstyle
 *   The name of the graphstyle defined in hook_islandora_ontologies_vlot_info().
 */

function islandora_ontologies_vlot_get_info($graphstyle= NULL) {
	  static $drupal_static_fast;
	  if (!isset($drupal_static_fast)) {
	    $drupal_static_fast['islandora_ontologies_vlot_info'] = &drupal_static(__FUNCTION__);
	  }
	  $graph_info = &$drupal_static_fast['islandora_ontologies_vlot_info'];

	  if (empty($graph_info)) {
	    if ($cache = cache_get("islandora_ontologies_vlot_info")) {
	      $graph_info = $cache->data;
	    }
	    else {
	      $graph_info = module_invoke_all('islandora_ontologies_vlot_info');

	      // Let other modules alter the vlot info.
	      drupal_alter('islandora_ontologies_vlot_info',  $graph_info);

	      cache_set("islandora_ontologies_vlot_info",  $graph_info);
	    }
	  }

	  if (empty($graphstyle)) {
	    return $graph_info;
	  }
	  elseif (isset($graph_info[$graphstyle])) {
	    return $graph_info[$graphstyle];
	  }
	}


/**
 * Attach 'islandora_ontologies_vlot javascript libraries.
 *
 * @param array $graphstyle
 *   $graph definition as returned by islandora_ontologies_vlot_get_info();
 * @param array $nodes
 *   Associative array of nodes and relations
 * @param string $height
 *   The height of the graph .
 *
 * @return array
 *   A renderable SVG.
 */
function islandora_ontologies_build_vlot($graphstyle=array(), $nodes = array(), $width='400', $height = '400') {
  $graph_id = drupal_html_id('graph-id1');
  $checked_id = drupal_html_id('selected-node-id1');
  $vlot_info_id = drupal_html_id('vlot_info_id');
  $build = array(
  'vlotinfo'=>array(
  '#theme' => 'html_tag',
  '#tag' => 'div',
  '#value' => t('Click over an Object to select'),
  '#default_value' => t('Click over an Object to select'),
  '#attributes' => array(
    'id' =>  $vlot_info_id,
    'class' => 'islandora-ontologies-vlot-info',
  ),
),	
	  'canvas'=>array(
    '#theme' => 'html_tag',
    '#tag' => 'div',
    '#value' => '',
    '#attributes' => array(
      'id' =>  $graph_id,
      'class' => 'islandora-ontologies-vlot-graph',
      'height' => $height,
    'style' => 'height:' .$height.'px;',
      
    ),
  ));

 
 
  $settings = array(
    'graphId' => $graph_id,
    'graphStyle' => $graphstyle,
    'nodes' => $nodes,
  );
  
  $build['#attached']['js'][] = array(
    'data' => array('vlot' => array($settings)),
    'type' => 'setting',
  );

  // Load the library
  drupal_add_library('islandora_ontologies', 'islandora_ontologies_vlot');
  return $build;
}

function islandora_ontologies_build_manage_vlot($graphstyle=array(), $nodes = array(), $width='400', $height = '400') {
  $graph_id = drupal_html_id('graph-id-manage1');
  $checked_id = drupal_html_id('selected-node-id1');
  $vlot_info_id = drupal_html_id('vlot_info_manage_id');
  $build = array(
  'vlotinfo'=>array(
  '#theme' => 'html_tag',
  '#tag' => 'div',
  '#value' => t('Click over an Object to select'),
  '#default_value' => t('Click over an Object to select'),
  '#attributes' => array(
    'id' =>  $vlot_info_id,
    'class' => 'islandora-ontologies-vlot-info',
  ),
),	
	  'canvas'=>array(
    '#theme' => 'html_tag',
    '#tag' => 'div',
    '#value' => '',
    '#attributes' => array(
      'id' =>  $graph_id,
      'class' => 'islandora-ontologies-vlot-graph',
      'height' => $height,
    'style' => 'height:' .$height.'px;',
      
    ),
  ));

 
 
  $settings = array(
    'graphId' => $graph_id,
    'graphStyle' => $graphstyle,
    'nodes' => $nodes,
  );
  
  
  $build['#attached']['js'][] = array(
    'data' => array('vlot_manage' => array($settings)),
    'type' => 'setting',
  );

  // Load the library
  drupal_add_library('islandora_ontologies', 'islandora_ontologies_manage_vlot');
  return $build;
}


